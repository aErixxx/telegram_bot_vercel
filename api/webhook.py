import os
import logging
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher
from aiogram.types import Update, Message
from aiogram.filters import Command

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡∏î‡∏∂‡∏á Bot Token ‡∏à‡∏≤‡∏Å Environment Variables
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI app
app = FastAPI(title="Telegram Bot", version="1.0.0")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á bot ‡πÅ‡∏•‡∏∞ dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Command handlers
@dp.message(Command("start"))
async def start_command(message: Message):
    """Handle /start command"""
    await message.reply(
        f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {message.from_user.first_name}! üëã\n"
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤\n\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n"
        "/help - ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n"
        "/info - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó"
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = """
ü§ñ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:**

/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó
/help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
/info - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó

üìù **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ

üí° **‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:** @your_username
    """
    await message.reply(help_text, parse_mode="Markdown")

@dp.message(Command("info"))
async def info_command(message: Message):
    """Handle /info command"""
    info_text = """
‚ÑπÔ∏è **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó**

üî∏ ‡∏ä‡∏∑‡πà‡∏≠: Telegram Bot
üî∏ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô: 1.0.0
üî∏ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢: aiogram + FastAPI + Vercel
üî∏ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‚úÖ

üìä **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:**
- ‡∏ä‡∏∑‡πà‡∏≠: {first_name}
- ID: {user_id}
- Username: @{username}
    """.format(
        first_name=message.from_user.first_name or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        user_id=message.from_user.id,
        username=message.from_user.username or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    )
    await message.reply(info_text)

# Handle ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
@dp.message()
async def echo_message(message: Message):
    """Echo any message that's not a command"""
    if message.text:
        # Simple echo with some processing
        response = f"‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏≤: {message.text}\n\n"
        response += f"üìù ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {len(message.text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£\n"
        response += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {message.date.strftime('%H:%M:%S')}"
        
        await message.reply(response)
    else:
        await message.reply("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

# FastAPI Routes
@app.get("/")
async def root():
    """Get bot status"""
    return JSONResponse({
        "message": "ü§ñ Telegram Bot is running!",
        "status": "OK",
        "bot_info": {
            "name": "Telegram Bot",
            "version": "1.0.0",
            "framework": "aiogram + FastAPI + Vercel",
            "available_commands": ["/start", "/help", "/info"]
        }
    })

@app.post("/webhook")
async def webhook(request: Request):
    """Process Telegram webhook"""
    try:
        # Parse JSON body
        webhook_data = await request.json()
        logger.info(f"üì® Received webhook: {webhook_data}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Telegram update ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 'update_id' not in webhook_data:
            logger.warning("‚ö†Ô∏è Invalid webhook data - missing update_id")
            raise HTTPException(status_code=400, detail="Invalid webhook data")
        
        # Create Update object
        update = Update(**webhook_data)
        
        # Process the update
        await dp.feed_update(bot, update)
        
        return JSONResponse({
            "ok": True,
            "update_id": webhook_data.get('update_id'),
            "processed": True
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return JSONResponse({
        "status": "healthy",
        "bot_token_set": bool(BOT_TOKEN),
        "timestamp": "2024-06-24"
    })

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return JSONResponse(
        status_code=404,
        content={"error": "Endpoint not found", "path": str(request.url.path)}
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "detail": str(exc)}
    )

# Main handler function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
handler = app
